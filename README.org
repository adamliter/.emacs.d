#+TITLE: Adam Liter's init.el
#+AUTHOR: Adam Liter
#+EMAIL: emacs@adamliter.org

#+LANGUAGE: en
#+PROPERTY: header-args:emacs-lisp :tangle init.el :padline no
#+PROPERTY: header-args:sh :eval no :exports code

This is an =org=-based rendition of my Emacs configuration. It draws
heavily from [[http://nhoffman.github.io/.emacs.d/][Noah Hoffman's Emacs configuration]]. It also draws somewhat
from [[https://github.com/hrs/dotfiles/][Harry R. Schwartz's Emacs configuration]].

#+TOC: headlines 1

* Initial setup
* Startup

The =init.el= file produced by this =init.org= file is intended to only
be used with versions of Emacs more recent than 24.x.

#+BEGIN_SRC emacs-lisp
  (unless (>= emacs-major-version 24)
    (error "Emacs version 24 or higher is required"))
#+END_SRC

Let's print a loading message at startup.

#+BEGIN_SRC emacs-lisp
  (message "Loading ~/.emacs.d/init.el")
#+END_SRC

* Packages

** Package archives

The default package archive is GNU's ELPA. That is, the default value of
~package-archives~ is ~(("gnu" . "http://elpa.gnu.org/packages/"))~.

There are several other package archives to add, however. But, in Emacs
versions 24.x, there is a problem in that there is no way to set the
priority of package archives. With Emacs >= 24.4, it is at least
possible to "pin" a package to a certain repository.

#+BEGIN_SRC emacs-lisp
  (when (>= emacs-major-version 24)
    (require 'package)
    (setq package-archives
          '(("ELPA" . "http://tromey.com/elpa/")
            ("gnu" . "http://elpa.gnu.org/packages/")
            ("melpa" . "http://melpa.org/packages/")
            ("melpa-stable" . "http://stable.melpa.org/packages/")
            ;("marmalade" . "http://marmalade-repo.org/packages/")
            ("org" . "http://orgmode.org/elpa/")))

    ;; Check if we're on Emacs 24.4 or newer, if so, use the pinned package feature
    (when (boundp 'package-pinned-packages)
      (setq package-pinned-packages
            '((org . "org")
              (magit . "melpa-stable")
              (markdown-mode . "melpa-stable"))))

    (package-initialize))
#+END_SRC

However, starting with Emacs 25.1, it is possible to assign a priority
to a package archive, such that packages in higher priority package
archives will be used instead of packages in lower priority package
archives.

#+BEGIN_SRC emacs-lisp
  (setq package-archive-priorities
        '(("org" . 30)
          ("melpa-stable" . 20)
          ;("marmalade" . 10)
          ("gnu" . 10)
          ("melpa" . 5)))

  (setq package-menu-hide-low-priority t)
#+END_SRC

** My packages
*** [[use-package][=use-package=]]

This =init.el= file uses the =use-package= package in order to bootstrap
the installation of all Emacs packages that I use, since they can be
installed if they aren't already by setting ~:ensure t~. However, in
order for this to work, =use-package= itself first needs to be
installed.

#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'use-package)
    (message "** bootstrapping the installation of use-package")
    (package-refresh-contents)
    (package-install 'use-package)
    (message "** successfully installed use-package"))
#+END_SRC

*** [[https://github.com/abo-abo/hydra][=hydra=]]

This sets up =hydra=, which allows for short keybindings provided in a
nicely displayed format.

#+BEGIN_SRC emacs-lisp
  (use-package hydra
    :ensure t)
#+END_SRC

*** [[https://gitlab.com/to1ne/use-package-hydra][=use-package-hydra=]]

Moreover, if we install =use-package-hyrda=, then Hydras can be defined
in the call to ~use-package~ using the ~:hydra~ keyword.

#+BEGIN_SRC emacs-lisp
  (use-package use-package-hydra
    :ensure t)
#+END_SRC

*** [[org][=org=]]

Since =org= comes with Emacs by default, now, =package.el= doesn't
install it from an archive because it is already available. Thus, even
when using =use-package='s ~:ensure t~ for =org=, the newer version of
the package from the =org= package archive is not installed.

The following code is a hack around this problem in that it modifies
~package-installed-p~ in order to check whether a package was downloaded
and installed via =package.el=. See [[use-package:/issues/319#issuecomment-185979556][this suggestion]] in a GitHub issue
thread.

#+BEGIN_SRC emacs-lisp
  (defun package-from-archive (f &rest args)
    (and (apply f args)
         (assq (car args) package-alist)))

  (advice-add 'package-installed-p :around #'package-from-archive)
#+END_SRC

The following defines some =org= keybindings that I want to be available
globally. Next, it defines ~org-link-abbrev-alist~ to include some links
that I'd like to be available to all of my =org= files. It also sets the
default ~org-directory~ to =~/org=, which is where my =org= submodule in
my [[config-files][=config-files=]] repo is symlinked to. This also sets up all =.org=
files in the =~/org= directory to be agenda files. Next, it sets up the
keywords that I want to use for TODO items, the fact that I want to log
changes to TODO items in a drawer, the refile targets, and the
~org-default-notes-file~, which is used for ~org-capture~.

I've also set up a Hydra for =org-agenda=, based on the [[https://github.com/abo-abo/hydra/wiki/Org-agenda][Hydra from the
project's wiki page]].

#+BEGIN_SRC emacs-lisp
  (use-package org
    :ensure t
    :after hydra
    :bind (("C-c l" . org-store-link)
           ("C-c a" . org-agenda)
           ("C-c c" . org-capture)
           ("C-c b" . org-iswitchb)
           ("C-c C-w" . org-refile)
           ("C-c C-x C-o" . org-clock-out))
    :mode ("\\.org\\'" . org-mode)
    :config
    (setq org-link-abbrev-alist
          '(;; General stuff on the internet
            ("google"                      . "http://www.google.com/search?q=")
            ("startpage"                   . "https://www.startpage.com/do/search?query=")
            ("tex-sx-search"               . "https://tex.stackexchange.com/search?q=")
            ("gh-gitignore"                . "https://github.com/github/gitignore")
            ("gh-gitignore-mac"            . "https://github.com/github/gitignore/blob/master/Global/macOS.gitignore")
            ("gh-gitignore-linux"          . "https://github.com/github/gitignore/blob/master/Global/Linux.gitignore")
            ("gh-gitignore-windows"        . "https://github.com/github/gitignore/blob/master/Global/Windows.gitignore")
            ("gh-gitignore-emacs"          . "https://github.com/github/gitignore/blob/master/Global/Emacs.gitignore")
            ("gh-gitignore-tex"            . "https://github.com/github/gitignore/blob/master/TeX.gitignore")
            ("gh-gitignore-python"         . "https://github.com/github/gitignore/blob/master/Python.gitignore")
            ("gh-gitignore-r"              . "https://github.com/github/gitignore/blob/master/R.gitignore")
            ;; Personal stuff on the internet
            ("adamliter-web"               . "https://www.adamliter.org")
            ("adamlitercv"                 . "https://www.adamliter.org/content/adamlitercv.pdf")
            ("atomicwriting"               . "https://www.atomicwriting.com")
            ("adamliter-github"            . "https://github.com/adamliter")
            ("config-files"                . "https://github.com/adamliter/config-files")
            ("emacs-d"                     . "https://github.com/adamliter/emacs.d")
            ("adamliter-keybase"           . "https://keybase.io/adamliter")
            ("adamliter-se"                . "https://stackexchange.com/users/2978319/adam-liter?tab=accounts")
            ("adamliter-tex-sx"            . "https://tex.stackexchange.com/users/32888/adam-liter")
            ("adamliter-twitter"           . "https://twitter.com/adam_liter")
            ("latex-workshop"              . "http://bit.ly/latex-workshop")
            ;; Referral links
            ("linode-ref"                  . "https://www.linode.com/?r=54ae7f8d79dc2dcea5d7778008242b6be864a8cf")
            ("fastmail-ref"                . "https://www.fastmail.com/?STKI=15818913")
            ;; Emacs packages
            ("use-package"                 . "https://github.com/jwiegley/use-package")
            ("org"                         . "http://orgmode.org/")
            ("fci"                         . "https://github.com/alpaker/Fill-Column-Indicator")
            ("markdown-mode"               . "http://jblevins.org/projects/markdown-mode/")
            ("exec-path-from-shell"        . "https://github.com/purcell/exec-path-from-shell")
            ("yasnippet"                   . "http://joaotavora.github.io/yasnippet/")
            ("magit"                       . "https://magit.vc/")
            ;; General tech stuff
            ("tmux-macos-pasteboard"       . "https://github.com/ChrisJohnsen/tmux-MacOSX-pasteboard")))
      (setq org-directory "~/org")
      (setq org-agenda-files '("~/org"))
      (setq org-todo-keywords
            '((sequence "TODO(t)" "FEEDBACK(f@/!)" "|" "DONE(d!)" "CANCELED(c@)")))
      (setq org-log-into-drawer t)
      (setq org-refile-targets '((nil :maxlevel . 5) (org-agenda-files :maxlevel . 5)))
      (setq org-default-notes-file (concat org-directory "/refile.org"))
      ;; org-agenda-mode-map does not exist until org-agenda is loaded,
      ;; so this must be wrapped in a call to eval-after-load, rather than
      ;; defined with use-package's :bind and :map keywords
      (eval-after-load "org-agenda"
        '(progn
           (define-key org-agenda-mode-map "v" 'hydra-org-agenda/body)))
      :pin org
      :hydra
      (hydra-org-agenda
       (:pre
        (setq which-key-inhibit t)
        :post
        (setq which-key-inhibit nil)
        :hint nil)
       "
  Org agenda (_q_uit)

  ^Clock^      ^Visit entry^              ^Date^             ^Other^
  ^-----^----  ^-----------^------------  ^----^-----------  ^-----^---------
  _ci_ in      _SPC_ in other window      _ds_ schedule      _gr_ reload
  _co_ out     _TAB_ & go to location     _dd_ set deadline  _._  go to today
  _cq_ cancel  _RET_ & del other windows  _dt_ timestamp     _gd_ go to date
  _cj_ jump    _o_   link                 _+_  do later      ^^
  ^^           ^^                         _-_  do earlier    ^^
  ^^           ^^                         ^^                 ^^
  ^View^          ^Filter^                 ^Headline^         ^Toggle mode^
  ^----^--------  ^------^---------------  ^--------^-------  ^-----------^----
  _vd_ day        _ft_ by tag              _ht_ set status    _tf_ follow
  _vw_ week       _fr_ refine by tag       _hk_ kill          _tl_ log
  _vt_ fortnight  _fc_ by category         _hr_ refile        _ta_ archive trees
  _vm_ month      _fh_ by top headline     _hA_ archive       _tA_ archive files
  _vy_ year       _fx_ by regexp           _h:_ set tags      _tr_ clock report
  _vn_ next span  _fd_ delete all filters  _hp_ set priority  _td_ diaries
  _vp_ prev span  ^^                       ^^                 ^^
  _vr_ reset      ^^                       ^^                 ^^
  ^^              ^^                       ^^                 ^^
  "
       ;; Entry
       ("hA" org-agenda-archive-default)
       ("hk" org-agenda-kill)
       ("hp" org-agenda-priority)
       ("hr" org-agenda-refile)
       ("h:" org-agenda-set-tags)
       ("ht" org-agenda-todo)
       ;; Visit entry
       ("o"   link-hint-open-link :exit t)
       ("<tab>" org-agenda-goto :exit t)
       ("TAB" org-agenda-goto :exit t)
       ("SPC" org-agenda-show-and-scroll-up)
       ("RET" org-agenda-switch-to :exit t)
       ;; Date
       ("dt" org-agenda-date-prompt)
       ("dd" org-agenda-deadline)
       ("+" org-agenda-do-date-later)
       ("-" org-agenda-do-date-earlier)
       ("ds" org-agenda-schedule)
       ;; View
       ("vd" org-agenda-day-view)
       ("vw" org-agenda-week-view)
       ("vt" org-agenda-fortnight-view)
       ("vm" org-agenda-month-view)
       ("vy" org-agenda-year-view)
       ("vn" org-agenda-later)
       ("vp" org-agenda-earlier)
       ("vr" org-agenda-reset-view)
       ;; Toggle mode
       ("ta" org-agenda-archives-mode)
       ("tA" (org-agenda-archives-mode 'files))
       ("tr" org-agenda-clockreport-mode)
       ("tf" org-agenda-follow-mode)
       ("tl" org-agenda-log-mode)
       ("td" org-agenda-toggle-diary)
       ;; Filter
       ("fc" org-agenda-filter-by-category)
       ("fx" org-agenda-filter-by-regexp)
       ("ft" org-agenda-filter-by-tag)
       ("fr" org-agenda-filter-by-tag-refine)
       ("fh" org-agenda-filter-by-top-headline)
       ("fd" org-agenda-filter-remove-all)
       ;; Clock
       ("cq" org-agenda-clock-cancel)
       ("cj" org-agenda-clock-goto :exit t)
       ("ci" org-agenda-clock-in :exit t)
       ("co" org-agenda-clock-out)
       ;; Other
       ("q" nil :exit t)
       ("gd" org-agenda-goto-date)
       ("." org-agenda-goto-today)
       ("gr" org-agenda-redo)))
#+END_SRC

Finally, because the aforementioned hack can cause problems when
installing/using other packages, I remove it after installing =org=.

#+BEGIN_SRC emacs-lisp
  (advice-remove 'package-installed-p #'package-from-archive)
#+END_SRC

*** [[https://github.com/hlissner/emacs-doom-themes][=doom-themes=]]

This sets up =doom-themes= and sets the default theme to =doom-one=.

#+BEGIN_SRC emacs-lisp
  (use-package doom-themes
    :ensure t
    :config
    (load-theme 'doom-one t)
    (doom-themes-visual-bell-config)
    (doom-themes-treemacs-config)
    (doom-themes-org-config))
#+END_SRC

*** [[https://github.com/seagle0128/doom-modeline][=doom-modeline=]]

This sets up =doom-modeline=.

#+BEGIN_SRC emacs-lisp
  (use-package doom-modeline
    :ensure t
    :pin melpa-stable
    :hook
    (after-init . doom-modeline-mode))
#+END_SRC

*** [[https://magit.vc/][=magit=]]

This package is an interface to =git= in Emacs.

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :bind (("C-x g" . magit-status))
    :config
    (setq git-commit-summary-max-length 50)
    (setq git-commit-fill-column 72)
    (setq magit-log-arguments (quote ("--graph"
                                      "--decorate"
                                      "--color")))
    (setq magit-commit-arguments (quote ("--gpg-sign=98723A2089026CD6")))
    (setq magit-repository-directories
          '(("~/projects" . 3)
            ("~/config-files" . 1)
            ("~/Dropbox/linguistics" . 1))))
#+END_SRC

*** [[https://github.com/bbatsov/projectile][=projectile=]]

#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :pin melpa-stable
    :bind (("C-c p" . projectile-command-map))
    :config
    (projectile-mode +1)
    (setq projectile-completion-system 'ivy)
    (setq projectile-project-search-path '("~/projects/")))

  (use-package counsel-projectile
    :ensure t
    :config
    (counsel-projectile-mode))
#+END_SRC

*** [[https://github.com/Alexander-Miller/treemacs][=treemacs=]]

#+BEGIN_SRC emacs-lisp
  (use-package treemacs
    :ensure t
    :defer t
    :bind
    (("M-0"       . treemacs-select-window)
     ("C-x t 1"   . treemacs-delete-other-windows)
     ("C-x t t"   . treemacs)
     ("C-x t B"   . treemacs-bookmark)
     ("C-x t C-t" . treemacs-find-file)
     ("C-x t M-t" . treemacs-find-tag)))

  (use-package treemacs-projectile
    :after treemacs projectile
    :ensure t)

  (use-package treemacs-magit
    :after treemacs magit
    :ensure t)
#+END_SRC

*** [[https://github.com/justbur/emacs-which-key][=which-key=]]

This package shows you possible keybinding continuations after a delay,
which is useful in case you forget keybindings.

#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :config
    (which-key-mode))
#+END_SRC

*** =dired=

This sets up a Hydra for =dired=, based on the [[https://github.com/abo-abo/hydra/wiki/Dired][example from the wiki]].

Note that ~:enusre~ must be set to ~nil~ because =dired= is not a
=package.el=-based package. (See [[https://emacs.stackexchange.com/a/26830/122][here]].)

#+BEGIN_SRC emacs-lisp
    (use-package dired
      :ensure nil
      :bind
      (:map dired-mode-map
            ("." . hydra-dired/body))
      :after hydra
      :hydra
      (hydra-dired
       (:pre
        (setq which-key-inhibit t)
        :post
        (setq which-key-inhibit nil)
        :hint nil)
       "
    _+_ mkdir          _v_iew           _m_ark             _(_ details        _i_nsert-subdir    wdired
    _C_opy             _O_ view other   _U_nmark all       _)_ omit-mode      _$_ hide-subdir    C-x C-q : edit
    _D_elete           _o_pen other     _u_nmark           _l_ redisplay      _w_ kill-subdir    C-c C-c : commit
    _R_ename           _M_ chmod        _t_oggle           _g_ revert buf     _e_ ediff          C-c ESC : abort
    _Y_ rel symlink    _G_ chgrp        _E_xtension mark   _s_ort             _=_ pdiff
    _S_ymlink          ^ ^              _F_ind marked      _._ toggle hydra   \\ flyspell
    _r_sync            ^ ^              ^ ^                ^ ^                _?_ summary
    _z_ compress-file  _A_ find regexp
    _Z_ compress       _Q_ repl regexp

    T - tag prefix
    "
       ("\\" dired-do-ispell)
       ("(" dired-hide-details-mode)
       (")" dired-omit-mode)
       ("+" dired-create-directory)
       ("=" diredp-ediff)         ;; smart diff
       ("?" dired-summary)
       ("$" diredp-hide-subdir-nomove)
       ("A" dired-do-find-regexp)
       ("C" dired-do-copy)        ;; Copy all marked files
       ("D" dired-do-delete)
       ("E" dired-mark-extension)
       ("e" dired-ediff-files)
       ("F" dired-do-find-marked-files)
       ("G" dired-do-chgrp)
       ("g" revert-buffer)        ;; read all directories again (refresh)
       ("i" dired-maybe-insert-subdir)
       ("l" dired-do-redisplay)   ;; relist the marked or singel directory
       ("M" dired-do-chmod)
       ("m" dired-mark)
       ("O" dired-display-file)
       ("o" dired-find-file-other-window)
       ("Q" dired-do-find-regexp-and-replace)
       ("R" dired-do-rename)
       ("r" dired-do-rsynch)
       ("S" dired-do-symlink)
       ("s" dired-sort-toggle-or-edit)
       ("t" dired-toggle-marks)
       ("U" dired-unmark-all-marks)
       ("u" dired-unmark)
       ("v" dired-view-file)      ;; q to exit, s to search, = gets line #
       ("w" dired-kill-subdir)
       ("Y" dired-do-relsymlink)
       ("z" diredp-compress-this-file)
       ("Z" dired-do-compress)
       ("q" nil)
       ("." nil :color blue)))
#+END_SRC

*** =ibuffer=

This sets up ~ibuffer~ as a replacement for ~list-buffers~. Buffers will
be sorted by major mode in the ibuffer window (though I prefer to have
things sorted by version control project; see =ibuffer-vc=
below). Moreover, setting ~ibuffer-expert~ to ~t~ will prevent prompting
for deletion of an unmodified buffer. This setup also prevents the
display of empty filter groups, and, finally, it displays file sizes in
a human readable format.

I've also defined a Hydra for =ibuffer=, based on the [[https://github.com/abo-abo/hydra/wiki/Ibuffer][suggested setup on
the project's wiki page]].

#+BEGIN_SRC emacs-lisp
  (use-package ibuffer
    :ensure t
    :after hydra
    :bind (([remap list-buffers] . ibuffer)
           :map ibuffer-mode-map
           ("." . hydra-ibuffer-main/body))
    :config
    (setq ibuffer-default-sorting-mode 'major-mode)
    (setq ibuffer-expert t)
    (setq ibuffer-show-empty-filter-groups nil)
    (define-ibuffer-column size-h
      (:name "Size" :inline t)
      (cond
       ((> (buffer-size) 1000000) (format "%7.1fM" (/ (buffer-size) 1000000.0)))
       ((> (buffer-size) 100000) (format "%7.0fk" (/ (buffer-size) 1000.0)))
       ((> (buffer-size) 1000) (format "%7.1fk" (/ (buffer-size) 1000.0)))
       (t (format "%8d" (buffer-size)))))
    (setq ibuffer-formats
          '((mark modified read-only " "
                  (name 18 18 :left :elide)
                  " "
                  (size-h 9 -1 :right)
                  " "
                  (mode 16 16 :left :elide)
                  " "
                  filename-and-process)))
    (add-hook 'ibuffer-hook #'hydra-ibuffer-main/body)
    :hydra
    (hydra-ibuffer-main
     (:pre
      (setq which-key-inhibit t)
      :post
      (setq which-key-inhibit nil)
      :hint nil)
     "
   ^Navigation^ | ^Mark^        | ^Actions^        | ^View^
  -^----------^-+-^----^--------+-^-------^--------+-^----^-------
    _k_:    ʌ   | _m_: mark     | _D_: delete      | _g_: refresh
   _RET_: visit | _u_: unmark   | _S_: save        | _s_: sort
    _j_:    v   | _*_: specific | _a_: all actions | _/_: filter
  -^----------^-+-^----^--------+-^-------^--------+-^----^-------
  "
     ("j" ibuffer-forward-line)
     ("RET" ibuffer-visit-buffer :color blue)
     ("k" ibuffer-backward-line)

     ("m" ibuffer-mark-forward)
     ("u" ibuffer-unmark-forward)
     ("*" hydra-ibuffer-mark/body :color blue)

     ("D" ibuffer-do-delete)
     ("S" ibuffer-do-save)
     ("a" hydra-ibuffer-action/body :color blue)

     ("g" ibuffer-update)
     ("s" hydra-ibuffer-sort/body :color blue)
     ("/" hydra-ibuffer-filter/body :color blue)

     ("o" ibuffer-visit-buffer-other-window "other window" :color blue)
     ("q" quit-window "quit ibuffer" :color blue)
     ("." nil "toggle hydra" :color blue))
    (hydra-ibuffer-mark
     (:pre
      (setq which-key-inhibit t)
      :post
      (setq which-key-inhibit nil)
      :columns 5
      :after-exit (hydra-ibuffer-main/body)
      :hint nil)
     "Mark"
     ("*" ibuffer-unmark-all "unmark all")
     ("M" ibuffer-mark-by-mode "mode")
     ("m" ibuffer-mark-modified-buffers "modified")
     ("u" ibuffer-mark-unsaved-buffers "unsaved")
     ("s" ibuffer-mark-special-buffers "special")
     ("r" ibuffer-mark-read-only-buffers "read-only")
     ("/" ibuffer-mark-dired-buffers "dired")
     ("e" ibuffer-mark-dissociated-buffers "dissociated")
     ("h" ibuffer-mark-help-buffers "help")
     ("z" ibuffer-mark-compressed-file-buffers "compressed")
     ("b" hydra-ibuffer-main/body "back" :color blue))
    (hydra-ibuffer-action
     (:pre
      (setq which-key-inhibit t)
      :post
      (setq which-key-inhibit nil)
      :columns 4
      :after-exit
      (if (eq major-mode 'ibuffer-mode)
          (hydra-ibuffer-main/body))
      :hint nil)
     "Action"
     ("A" ibuffer-do-view "view")
     ("E" ibuffer-do-eval "eval")
     ("F" ibuffer-do-shell-command-file "shell-command-file")
     ("I" ibuffer-do-query-replace-regexp "query-replace-regexp")
     ("H" ibuffer-do-view-other-frame "view-other-frame")
     ("N" ibuffer-do-shell-command-pipe-replace "shell-cmd-pipe-replace")
     ("M" ibuffer-do-toggle-modified "toggle-modified")
     ("O" ibuffer-do-occur "occur")
     ("P" ibuffer-do-print "print")
     ("Q" ibuffer-do-query-replace "query-replace")
     ("R" ibuffer-do-rename-uniquely "rename-uniquely")
     ("T" ibuffer-do-toggle-read-only "toggle-read-only")
     ("U" ibuffer-do-replace-regexp "replace-regexp")
     ("V" ibuffer-do-revert "revert")
     ("W" ibuffer-do-view-and-eval "view-and-eval")
     ("X" ibuffer-do-shell-command-pipe "shell-command-pipe")
     ("b" nil "back"))
    (hydra-ibuffer-sort
     (:pre
      (setq which-key-inhibit t)
      :post
      (setq which-key-inhibit nil)
      :columns 3
      :hint nil)
     "Sort"
     ("i" ibuffer-invert-sorting "invert")
     ("a" ibuffer-do-sort-by-alphabetic "alphabetic")
     ("v" ibuffer-do-sort-by-recency "recently used")
     ("s" ibuffer-do-sort-by-size "size")
     ("f" ibuffer-do-sort-by-filename/process "filename")
     ("m" ibuffer-do-sort-by-major-mode "mode")
     ("b" hydra-ibuffer-main/body "back" :color blue))
    (hydra-ibuffer-filter
     (:pre
      (setq which-key-inhibit t)
      :post
      (setq which-key-inhibit nil)
      :columns 4
      :hint nil)
     "Filter"
     ("m" ibuffer-filter-by-used-mode "mode")
     ("M" ibuffer-filter-by-derived-mode "derived mode")
     ("n" ibuffer-filter-by-name "name")
     ("c" ibuffer-filter-by-content "content")
     ("e" ibuffer-filter-by-predicate "predicate")
     ("f" ibuffer-filter-by-filename "filename")
     (">" ibuffer-filter-by-size-gt "size")
     ("<" ibuffer-filter-by-size-lt "size")
     ("/" ibuffer-filter-disable "disable")
     ("b" hydra-ibuffer-main/body "back" :color blue)))
#+END_SRC

*** [[https://github.com/purcell/ibuffer-vc][=ibuffer-vc=]]

This extends =ibuffer= to allow the files to be grouped according to
their version control parent root.

#+BEGIN_SRC emacs-lisp
  (use-package ibuffer-vc
    :ensure t
    :config
    (add-hook 'ibuffer-hook
              (lambda ()
                (ibuffer-vc-set-filter-groups-by-vc-root)
                (unless (eq ibuffer-sorting-mode 'alphabetic)
                  (ibuffer-do-sort-by-alphabetic)))))

#+END_SRC

*** [[https://github.com/abo-abo/ace-window][=ace-window=]]

This sets up =ace-window= as a replacement for ~other-window~. I've also
set a larger font size for the ~aw-keys~ that get displayed in each
window. Finally, there is a bug in the MELPA Stable version of this
package at the time of updating this file (2018-08-03, version 0.9.0),
so I've pinned this package to MELPA for the time being, since the bug
does not exist in that version of this package.

#+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :ensure t
    :bind (([remap other-window] . ace-window))
    :config
    (custom-set-faces
     '(aw-leading-char-face
       ((t (:inherit ace-jump-face-foreground :height 3.0)))))
    :pin melpa)
#+END_SRC

*** [[https://github.com/abo-abo/swiper][=ivy=]]

This installs =ivy=, which is a completion framework that basically
replaces =ido=. Enabling =ivy-mode= sets up =ivy= completion for file
and buffer names.

Moreover, setting =ivy-use-virtual-buffers= to something that is non nil
will include virtual buffers in the completion list.

=ivy-count-format= specifies how the number of candidates and the
current candidate are displayed.

Setting =ivy-wrap= to true causes =C-n= and =C-p= to wrap
around when cycling through candidates.

Finally, I've bound =C-c C-r= to =ivy-resume=, which will resume the
last =ivy= completion session, which is useful if you accidentally close
it.

#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :ensure t
    :bind (("C-c C-r" . ivy-resume))
    :config
    (ivy-mode t)
    (setq ivy-use-virtual-buffers t)
    (setq ivy-count-format "(%d/%d) ")
    (setq ivy-wrap t))
#+END_SRC

*** [[https://github.com/abo-abo/swiper][=counsel=]]

This sets up =counsel=, which provides versions of many common Emacs
commands that use =ivy=. Enabling =counsel-mode= sets up the default
keybindings for all of the =counsel= replacement commands.

#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :ensure t
    :config
    (counsel-mode t))
#+END_SRC

*** [[https://github.com/abo-abo/swiper][=swiper=]]

This sets up =swiper=, which is an alternative to =isearch=.

#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :ensure t
    :bind (("C-s" . swiper)))
#+END_SRC

*** [[exec-path-from-shell][=exec-path-from-shell=]]

Get ~$MANPATH~, ~$PATH~, ~$GEM_HOME~, ~$GEM_PATH~, and exec-path from
the shell (but only in macOS).

#+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell
    :ensure t
    :if (memq window-system '(mac ns))
    :config
    (setq exec-path-from-shell-variables '("PATH" "MANPATH" "GEM_HOME" "GEM_PATH"))
    (exec-path-from-shell-initialize))
#+END_SRC

*** [[https://www.emacswiki.org/emacs/MultiTerm][=multi-term=]]

This installs the package =multi-term= for better management of shell
sessions inside of Emacs buffers.

#+BEGIN_SRC emacs-lisp
  (use-package multi-term
    :ensure t)
#+END_SRC

*** [[https://github.com/dieggsy/eterm-256color][=eterm-256color=]]

This installs the package =eterm-256color= for support of escaped color
sequences in shells run inside of Emacs buffers.

#+BEGIN_SRC emacs-lisp
  (use-package eterm-256color
    :ensure t
    :config
    (add-hook 'term-mode-hook #'eterm-256color-mode))
#+END_SRC

*** [[https://github.com/domtronn/all-the-icons.el][=all-the-icons=]]

This sets up the =all-the-icons= package, which can be used by the
=doom-themes= package to set up =treemacs=.

#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons
    :ensure t)
#+END_SRC

*** [[fci][=fill-column-indicator=]]

I use =Fill-Column-Indicator= to help wrap my writing and code at
appropriate points. I'd also like to enable the column rule by default
in ~markdown-mode~. I don't enable it by default for =org= because the
column rule causes problems for =org= commands like ~M-<RET>~
(~org-insert-heading~) when run in the context of a list item. I'm not
entirely sure what the problem is, but it causes the point to end up at
the end of the line, after the column rule.

#+BEGIN_SRC emacs-lisp
  (use-package fill-column-indicator
    :ensure t
    :config
    (setq-default fill-column 72)
    (add-hook 'markdown-mode-hook 'fci-mode))
#+END_SRC

*** [[markdown-mode][=markdown-mode=]]

I use =markdown-mode= for editing files that end in =.md=, =.mdown=, or
=.markdown=. Moreover, =gfm-mode= (another major mode provided by this
package) is used for editing files called =README.md= in particular,
which is generally the default name for a README file in a GitHub repo.

Setting the ~markdown-command~ to ~multimarkdown~ uses [[http://fletcherpenney.net/multimarkdown/][~multimarkdown~]]
to export the Markdown file to HTML, PDF, /etc./.

#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :ensure t
    :commands (markdown-mode gfm-mode)
    :mode (("README\\.md\\'" . gfm-mode)
           ("\\.md\\'" . markdown-mode)
           ("\\.mdown\\'" . markdown-mode)
           ("\\.markdown\\'" . markdown-mode))
    :init
    (setq markdown-command "multimarkdown"))
#+END_SRC

*** [[https://www.gnu.org/software/auctex/][=auctex=]]

This sets up AUCTeX for editing LaTeX documents. Note that the
distributed package is called AUCTeX, but the package that you actually
need to load is just called "tex". Thus, the loaded package is just
=tex=, but we can set AUCTeX as the ~:ensure~ value to make sure that it
is isntalled.

~TeX-auto-save~ automatically saves the file in the buffer, and then
~TeX-parse-self~ parsing the (saved) file so that the mode can provide
macro and compleition information, based on the packages you're using.

Setting ~TeX-master~ to ~nil~ will prompt for setting the master file,
which is the root file that will be used when compiling the document, if
you're using ~\include~ or ~\input~, for example.

The next two configuration options set up AUCTeX to use =pdf-tools=. See
[[https://emacs.stackexchange.com/a/19475/122][here]], [[https://emacs.stackexchange.com/a/21764/122][here]], and [[https://emacs.stackexchange.com/a/23853/122][here]] for more information (the second and third links
are about also setting ~TeX-view-program-list~, which I had to set in
addition to ~TeX-view-program-selection~ in order to get this to work);
moreover, see [[https://emacs.stackexchange.com/a/22591/122][here]] for installing =pdf-tools= on macOS.

Next, I set the label prefixes that should be used when inserting a
section with =C-c C-s=.

The next configuration bit sets up AUCTeX to also be able to use [[https://github.com/cereda/arara][arara]],
XeLaTeX, LuaLaTeX, and GNU Make.

And, finally, setting ~TeX-fold-mode~ to non nil enables the ability to
fold stuff; moreover, setting it as part of the ~'TeX-mode-hook~ means
that it will be available in all AUCTeX modes, since this (along with
~text-mode-hook~) is run by each of the special AUCTeX mode hooks.

#+BEGIN_SRC emacs-lisp
  (use-package tex
    :ensure auctex
    :mode ("\\.tex\\'" . TeX-latex-mode)
    :config
    (setq TeX-auto-save t)
    (setq TeX-parse-self t)
    (setq-default TeX-master nil)
    (setq TeX-view-program-list '(("PDF Tools" TeX-pdf-tools-sync-view)))
    (setq TeX-view-program-selection '((output-pdf "PDF Tools")))
    (setq TeX-source-correlate-start-server t)
    (setq TeX-save-query nil)
    (add-hook 'TeX-after-compilation-finished-functions
              #'TeX-revert-document-buffer)
    (setq LaTeX-section-label
          '(("part" . "part:")
            ("chapter" . "chap:")
            ("section" . "sec:")
            ("subsection" . "subsec:")
            "subsubsection" . "subsubsec:"))
    (add-to-list
     'TeX-command-list
     '("Arara"
       "arara --verbose %s"
       TeX-run-command
       nil                       ; ask for confirmation
       t                         ; active in all modes
       :help "Run Arara"))
    (add-to-list
     'TeX-command-list
     '("XeLaTeX"
       "xelatex --file-line-error %s"
       TeX-run-command
       nil
       t
       :help "Run XeLaTeX"))
    (add-to-list
      'TeX-command-list
      '("LuaLaTeX"
        "lualatex --file-line-error %s"
        TeX-run-command
        nil
        t
        :help "Run LuaLaTeX"))
    (add-to-list
     'TeX-command-list
     '("Make"
       "make"
       TeX-run-TeX
       nil
       t
       :help "Run make"))
    (defun adamliter-TeX-make ()
      "Interactive function for running GNU Make on a (La)TeX file."
      (interactive)
      (TeX-command-sequence '("Make" "View") t))
    (defun adamliter-TeX-arara ()
      "Interactive function for running Arara on a (La)TeX file."
      (interactive)
      (TeX-command-sequence '("Arara" "View") t))
    (add-hook 'TeX-mode-hook (lambda ()
                               (TeX-fold-mode 1)))
    :bind
    (:map TeX-mode-map
          ("C-c C-m" . adamliter-TeX-make)
          ("C-c M-a" . adamliter-TeX-arara)))
#+END_SRC

*** [[https://www.gnu.org/software/auctex/reftex.html][=reftex=]]

This sets up and installs RefTeX for use with AUCTeX.

#+BEGIN_SRC emacs-lisp
  (use-package reftex
    :after tex
    :config
    (setq reftex-plug-into-AUCTeX t)
    (add-hook 'TeX-mode-hook 'turn-on-reftex))
#+END_SRC

*** [[https://github.com/politza/pdf-tools/][=pdf-tools=]]

If on macOS, =epdfinfo= needs to be installed, which can be done with
~brew tap dunn/emacs && brew install pdf-tools~ (see [[https://emacs.stackexchange.com/a/22591/122][here]]).

This then sets up =pdf-tools= and also disables the display of line
numbers in buffers for PDFs.

I've also set up a Hydra for =pdf-tools= based on the [[https://github.com/abo-abo/hydra/wiki/PDF-Tools][Hydra from the
project's wiki]].

It unfortunately seems that something goes wrong when trying to use
=use-package='s ~:bind~ and ~:map~ keywords for setting keys for
~pdf-view-mode-map~ (see [[https://emacs.stackexchange.com/q/51295/122][here]]), so I've instead set the keybindings with
~define-key~.

#+BEGIN_SRC emacs-lisp
  (use-package pdf-tools
    :ensure t
    :after hydra
    :pin melpa
    :config
    (pdf-tools-install)
    (setq pdf-info-epdfinfo-program "/usr/local/bin/epdfinfo")
    (add-hook 'pdf-view-mode-hook
              (lambda ()
                (display-line-numbers-mode -1)))
    (add-hook 'pdf-annot-minor-mode-hook
              (lambda ()
                (display-line-numbers-mode -1)))
    (define-key pdf-view-mode-map (kbd "\\") 'hydra-pdftools/body)
    (define-key pdf-view-mode-map (kbd "<s-spc>") 'pdf-view-scroll-down-or-next-page)
    (define-key pdf-view-mode-map (kbd "g") 'pdf-view-first-page)
    (define-key pdf-view-mode-map (kbd "G") 'pdf-view-list-page)
    (define-key pdf-view-mode-map (kbd "l") 'image-forward-hscroll)
    (define-key pdf-view-mode-map (kbd "h") 'image-back-hscroll)
    (define-key pdf-view-mode-map (kbd "j")  'pdf-view-next-page)
    (define-key pdf-view-mode-map (kbd "k")  'pdf-view-previous-page)
    (define-key pdf-view-mode-map (kbd "e")  'pdf-view-goto-page)
    (define-key pdf-view-mode-map (kbd "u")  'pdf-view-revert-buffer)
    (define-key pdf-view-mode-map (kbd "al") 'pdf-annot-list-annotations)
    (define-key pdf-view-mode-map (kbd "ad") 'pdf-annot-delete)
    (define-key pdf-view-mode-map (kbd "aa") 'pdf-annot-attachment-dired)
    (define-key pdf-view-mode-map (kbd "am") 'pdf-annot-add-markup-annotation)
    (define-key pdf-view-mode-map (kbd "at") 'pdf-annot-add-text-annotation)
    (define-key pdf-view-mode-map (kbd "y")  'pdf-view-kill-ring-save)
    (define-key pdf-view-mode-map (kbd "i")  'pdf-misc-display-metadata)
    (define-key pdf-view-mode-map (kbd "s")  'pdf-occur)
    (define-key pdf-view-mode-map (kbd "b")  'pdf-view-set-slice-from-bounding-box)
    (define-key pdf-view-mode-map (kbd "r")  'pdf-view-reset-slice)
    :hydra
    (hydra-pdftools
     (:pre
      (setq which-key-inhibit t)
      :post
      (setq which-key-inhibit nil)
      :hint nil)
     "
                                                                     ╭───────────┐
      Move  History   Scale/Fit     Annotations  Search/Link    Do   │ PDF Tools │
  ╭──────────────────────────────────────────────────────────────────┴───────────╯
        ^^_g_^^      _B_    ^↧^    _+_    ^ ^     [_al_] list    [_s_] search    [_u_] revert buffer
        ^^^↑^^^      ^↑^    _H_    ^↑^  ↦ _W_ ↤   [_am_] markup  [_o_] outline   [_i_] info
        ^^_p_^^      ^ ^    ^↥^    _0_    ^ ^     [_at_] text    [_F_] link      [_d_] dark mode
        ^^^↑^^^      ^↓^  ╭─^─^─┐  ^↓^  ╭─^ ^─┐   [_ad_] delete  [_f_] search link
   _h_ ←pag_e_→ _l_  _N_  │ _P_ │  _-_    _b_     [_aa_] dired
        ^^^↓^^^      ^ ^  ╰─^─^─╯  ^ ^  ╰─^ ^─╯   [_y_]  yank
        ^^_n_^^      ^ ^  _r_eset slice box
        ^^^↓^^^
        ^^_G_^^
  --------------------------------------------------------------------------------
  "
     ("\\" hydra-master/body "back")
     ("<ESC>" nil "quit")
     ("al" pdf-annot-list-annotations)
     ("ad" pdf-annot-delete)
     ("aa" pdf-annot-attachment-dired)
     ("am" pdf-annot-add-markup-annotation)
     ("at" pdf-annot-add-text-annotation)
     ("y"  pdf-view-kill-ring-save)
     ("+" pdf-view-enlarge :color red)
     ("-" pdf-view-shrink :color red)
     ("0" pdf-view-scale-reset)
     ("H" pdf-view-fit-height-to-window)
     ("W" pdf-view-fit-width-to-window)
     ("P" pdf-view-fit-page-to-window)
     ("n" pdf-view-next-page-command :color red)
     ("p" pdf-view-previous-page-command :color red)
     ("d" pdf-view-dark-minor-mode)
     ("b" pdf-view-set-slice-from-bounding-box)
     ("r" pdf-view-reset-slice)
     ("g" pdf-view-first-page)
     ("G" pdf-view-last-page)
     ("e" pdf-view-goto-page)
     ("o" pdf-outline)
     ("s" pdf-occur)
     ("i" pdf-misc-display-metadata)
     ("u" pdf-view-revert-buffer)
     ("F" pdf-links-action-perfom)
     ("f" pdf-links-isearch-link)
     ("B" pdf-history-backward :color red)
     ("N" pdf-history-forward :color red)
     ("l" image-forward-hscroll :color red)
     ("h" image-backward-hscroll :color red)))
#+END_SRC

*** [[https://github.com/flycheck/flycheck][=flycheck=]]

This sets up =flycheck= for syntax checking.

#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :init (global-flycheck-mode))
#+END_SRC

*** [[https://github.com/jorgenschaefer/elpy][=elpy=]]

This sets up =elpy=.

#+BEGIN_SRC emacs-lisp
  (use-package elpy
    :ensure t
    :defer t
    :init
    (advice-add 'python-mode :before 'elpy-enable))
#+END_SRC

*** [[https://github.com/pwalsh/pipenv.el][=pipenv=]]

This sets up =pipenv=, which is a porcelain for [[https://pipenv.readthedocs.io/en/latest/][Pipenv]].

#+BEGIN_SRC emacs-lisp
  (use-package pipenv
    :hook
    (python-mode . pipenv-mode)
    :init
    (setq
     pipenv-projectile-after-switch-function
     #'pipenv-projectile-after-switch-extended))
#+END_SRC

*** [[yasnippet][=YASnippet=]]

This sets up =yasnippet=. ~:demand t~ ensures it is loaded at startup,
and the ~after-save-hook~ reloads all snippets after saving a snippet
file.

#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :demand t
    :mode
    ("\\.yasnippet\\'" . snippet-mode)
    :init
    (progn
      (add-hook 'after-save-hook
                (lambda ()
                  (when (eql major-mode 'snippet-mode)
                    (yas-reload-all)))))
    :config
    (yas-global-mode t))
#+END_SRC

My snippets are stored in =~/.emacs.d/snippets=, which is one of the
default locations that is checked for snippets (see ~yas-snippet-dirs~).

* Preferences

Set the initial major mode for the =*scratch*= buffer to =text-mode=.

#+BEGIN_SRC emacs-lisp
  (setq initial-major-mode 'text-mode)
#+END_SRC

Let's get rid of the error bell.

#+BEGIN_SRC emacs-lisp
  (setq ring-bell-function 'ignore)
#+END_SRC

Let's make the "yes or no" prompts shorter.

#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

Let's prevent Emacs from adding customized settings to =init.el=. The
following will cause the customized settings to be written to a
temporary file, effectively making the changes session local, and also
preventing Emacs from writing anything to =init.el=.

#+BEGIN_SRC emacs-lisp
  (setq custom-file (make-temp-file "emacs-custom"))
#+END_SRC

* Appearance

** Hide some default stuff

Don't display the splash screen.

#+BEGIN_SRC emacs-lisp
  (setq inhibit-splash-screen t)
#+END_SRC

Don't display the tool bar.

#+BEGIN_SRC emacs-lisp
  (tool-bar-mode 0)
#+END_SRC

Don't display the menu bar.

#+BEGIN_SRC emacs-lisp
  (menu-bar-mode 0)
#+END_SRC

Don't display the scroll bar

#+BEGIN_SRC emacs-lisp
  (scroll-bar-mode 0)
#+END_SRC

Don't have a message in the scratch buffer.

#+BEGIN_SRC emacs-lisp
  (setq initial-scratch-message nil)
#+END_SRC

Don't display fringes.

#+BEGIN_SRC emacs-lisp
  (set-fringe-mode '(0 . 0))
#+END_SRC

On a Mac (requires Emacs 26), make the titlebar transparent, set it to
dark mode, remove the icon and title of the file.

#+BEGIN_SRC emacs-lisp
  (when
      (and
         (>= emacs-major-version 26)
         (eq system-type 'darwin))
    (add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
    (add-to-list 'default-frame-alist '(ns-appearance . dark))
    (setq ns-use-proxy-icon nil)
    (setq frame-title-format nil))
#+END_SRC

** Buffers

For line numbers, use new line number support in Emacs 26 and newer;
otherwise, no longer display line numbers.

#+BEGIN_SRC emacs-lisp
  (when (>= emacs-major-version 26)
    (global-display-line-numbers-mode))
#+END_SRC

** Mode line

Display the line and column numbers in the mode line.

#+BEGIN_SRC emacs-lisp
  (setq column-number-mode t)
#+END_SRC

* Editing

Show matching parentheses.

#+BEGIN_SRC emacs-lisp
  (show-paren-mode 1)
#+END_SRC

Don't use tabs! (Note that ~setq-default~ only sets the value of
~indent-tabs-mode~ if it isn't already set by something else in a local
buffer. A more agressive stance against tabs would be
~(setq indent-tabs-mode nil)~, but there might be some cases where tabs
are actually wanted (e.g., makefiles), so I'd rather not do that.)

#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil)
#+END_SRC

* Exiting and saving

** Whitespace

Ensure that a file ends with a newline.

#+BEGIN_SRC emacs-lisp
  (setq require-final-newline t)
#+END_SRC


# Local Variables:
# mode: org
# coding: utf-8
# fill-column: 72
# indent-tabs-mode: nil
# End:
