#+TITLE: Adam Liter's init.el
#+AUTHOR: Adam Liter
#+EMAIL: emacs@adamliter.org

#+LANGUAGE: en
#+PROPERTY: header-args:emacs-lisp :tangle init.el :padline no
#+PROPERTY: header-args:sh :eval no :exports code

This is an =org=-based rendition of my Emacs configuration. It draws
heavily from [[http://nhoffman.github.io/.emacs.d/][Noah Hoffman's Emacs configuration]]. It also draws somewhat
from [[https://github.com/hrs/dotfiles/][Harry R. Schwartz's Emacs configuration]].

#+TOC: headlines 1

* Initial setup
* Startup

The =init.el= file produced by this =init.org= file is intended to only
be used with versions of Emacs more recent than 24.x.

#+BEGIN_SRC emacs-lisp
  (unless (>= emacs-major-version 24)
    (error "Emacs version 24 or higher is required"))
#+END_SRC

Let's print a loading message at startup.

#+BEGIN_SRC emacs-lisp
  (message "Loading ~/.emacs.d/init.el")
#+END_SRC

* Packages

** Package archives

The default package archive is GNU's ELPA. That is, the default value of
~package-archives~ is ~(("gnu" . "http://elpa.gnu.org/packages/"))~.

There are several other package archives to add, however. But, in Emacs
versions 24.x, there is a problem in that there is no way to set the
priority of package archives. With Emacs >= 24.4, it is at least
possible to "pin" a package to a certain repository.

#+BEGIN_SRC emacs-lisp
  (when (>= emacs-major-version 24)
    (require 'package)
    (setq package-archives
          '(("ELPA" . "http://tromey.com/elpa/")
            ("gnu" . "http://elpa.gnu.org/packages/")
            ("melpa" . "http://melpa.org/packages/")
            ("melpa-stable" . "http://stable.melpa.org/packages/")
            ;("marmalade" . "http://marmalade-repo.org/packages/")
            ("org" . "http://orgmode.org/elpa/")
            ))

    ;; Check if we're on Emacs 24.4 or newer, if so, use the pinned package feature
    (when (boundp 'package-pinned-packages)
      (setq package-pinned-packages
            '((org . "org")
              (magit . "melpa-stable")
              (markdown-mode . "melpa-stable")
              )))

    (package-initialize))
#+END_SRC

However, starting with Emacs 25.1, it is possible to assign a priority
to a package archive, such that packages in higher priority package
archives will be used instead of packages in lower priority package
archives.

#+BEGIN_SRC emacs-lisp
  (setq package-archive-priorities
        '(("org" . 30)
          ("melpa-stable" . 20)
          ;("marmalade" . 10)
          ("gnu" . 10)
          ("melpa" . 5)))

  (setq package-menu-hide-low-priority t)
#+END_SRC

** My packages
*** [[use-package][=use-package=]]

This =init.el= file uses the =use-package= package in order to bootstrap
the installation of all Emacs packages that I use, since they can be
installed if they aren't already by setting ~:ensure t~. However, in
order for this to work, =use-package= itself first needs to be
installed.

#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'use-package)
    (message "** bootstrapping the installation of use-package")
    (package-refresh-contents)
    (package-install 'use-package)
    (message "** successfully installed use-package"))
#+END_SRC

*** [[org][=org=]]

Since =org= comes with Emacs by default, now, =package.el= doesn't
install it from an archive because it is already available. Thus, even
when using =use-package='s ~:ensure t~ for =org=, the newer version of
the package from the =org= package archive is not installed.

The following code is a hack around this problem in that it modifies
~package-installed-p~ in order to check whether a package was downloaded
and installed via =package.el=. See [[use-package:/issues/319#issuecomment-185979556][this suggestion]] in a GitHub issue
thread.

#+BEGIN_SRC emacs-lisp
  (defun package-from-archive (f &rest args)
    (and (apply f args)
         (assq (car args) package-alist)))

  (advice-add 'package-installed-p :around #'package-from-archive)
#+END_SRC

The following defines some =org= keybindings that I want to be available
globally. Next, it defines ~org-link-abbrev-alist~ to include some links
that I'd like to be available to all of my =org= files. It also sets the
default ~org-directory~ to =~/org=, which is where my =org= submodule in
my [[config-files][=config-files=]] repo is symlinked to. This also sets up all =.org=
files in the =~/org= directory to be agenda files. Next, it sets up the
keywords that I want to use for TODO items, the fact that I want to log
changes to TODO items in a drawer, the refile targets, and the
~org-default-notes-file~, which is used for ~org-capture~.

#+BEGIN_SRC emacs-lisp
  (use-package org
    :ensure t
    :bind (("C-c l" . org-store-link)
           ("C-c a" . org-agenda)
           ("C-c c" . org-capture)
           ("C-c b" . org-iswitchb)
           ("C-c C-w" . org-refile)
           ("C-c C-x C-o" . org-clock-out))
    :mode ("\\.org\\'" . org-mode)
    :config
    (setq org-link-abbrev-alist
          '(;; General stuff on the internet
            ("google"                      . "http://www.google.com/search?q=")
            ("startpage"                   . "https://www.startpage.com/do/search?query=")
            ("tex-sx-search"               . "https://tex.stackexchange.com/search?q=")
            ("gh-gitignore"                . "https://github.com/github/gitignore")
            ("gh-gitignore-mac"            . "https://github.com/github/gitignore/blob/master/Global/macOS.gitignore")
            ("gh-gitignore-linux"          . "https://github.com/github/gitignore/blob/master/Global/Linux.gitignore")
            ("gh-gitignore-windows"        . "https://github.com/github/gitignore/blob/master/Global/Windows.gitignore")
            ("gh-gitignore-emacs"          . "https://github.com/github/gitignore/blob/master/Global/Emacs.gitignore")
            ("gh-gitignore-tex"            . "https://github.com/github/gitignore/blob/master/TeX.gitignore")
            ("gh-gitignore-python"         . "https://github.com/github/gitignore/blob/master/Python.gitignore")
            ("gh-gitignore-r"              . "https://github.com/github/gitignore/blob/master/R.gitignore")
            ;; Personal stuff on the internet
            ("adamliter-web"               . "https://www.adamliter.org")
            ("adamlitercv"                 . "https://www.adamliter.org/content/adamlitercv.pdf")
            ("atomicwriting"               . "https://www.atomicwriting.com")
            ("adamliter-github"            . "https://github.com/adamliter")
            ("config-files"                . "https://github.com/adamliter/config-files")
            ("emacs-d"                     . "https://github.com/adamliter/emacs.d")
            ("adamliter-keybase"           . "https://keybase.io/adamliter")
            ("adamliter-se"                . "https://stackexchange.com/users/2978319/adam-liter?tab=accounts")
            ("adamliter-tex-sx"            . "https://tex.stackexchange.com/users/32888/adam-liter")
            ("adamliter-twitter"           . "https://twitter.com/adam_liter")
            ("latex-workshop"              . "http://bit.ly/latex-workshop")
            ;; Referral links
            ("linode-ref"                  . "https://www.linode.com/?r=54ae7f8d79dc2dcea5d7778008242b6be864a8cf")
            ("fastmail-ref"                . "https://www.fastmail.com/?STKI=15818913")
            ;; Emacs packages
            ("use-package"                 . "https://github.com/jwiegley/use-package")
            ("org"                         . "http://orgmode.org/")
            ("fci"                         . "https://github.com/alpaker/Fill-Column-Indicator")
            ("markdown-mode"               . "http://jblevins.org/projects/markdown-mode/")
            ("exec-path-from-shell"        . "https://github.com/purcell/exec-path-from-shell")
            ("yasnippet"                   . "http://joaotavora.github.io/yasnippet/")
            ("magit"                       . "https://magit.vc/")
            ;; General tech stuff
            ("tmux-macos-pasteboard"       . "https://github.com/ChrisJohnsen/tmux-MacOSX-pasteboard")))
      (setq org-directory "~/org")
      (setq org-agenda-files '("~/org"))
      (setq org-todo-keywords
            '((sequence "TODO(t)" "FEEDBACK(f@/!)" "|" "DONE(d!)" "CANCELED(c@)")))
      (setq org-log-into-drawer t)
      (setq org-refile-targets '((nil :maxlevel . 5) (org-agenda-files :maxlevel . 5)))
      (setq org-default-notes-file (concat org-directory "/refile.org"))
      :pin org)
#+END_SRC

Finally, because the aforementioned hack can cause problems when
installing/using other packages, I remove it after installing =org=.

#+BEGIN_SRC emacs-lisp
  (advice-remove 'package-installed-p #'package-from-archive)
#+END_SRC

*** [[https://github.com/hlissner/emacs-doom-themes][=doom-themes=]]

This sets up =doom-themes= and sets the default theme to =doom-one=.

#+BEGIN_SRC emacs-lisp
  (use-package doom-themes
    :ensure t
    :config
    (load-theme 'doom-one t)
    (doom-themes-visual-bell-config)
    (doom-themes-treemacs-config)
    (doom-themes-org-config))
#+END_SRC

*** [[https://github.com/seagle0128/doom-modeline][=doom-modeline=]]

This sets up =doom-modeline=.

#+BEGIN_SRC emacs-lisp
  (use-package doom-modeline
    :ensure t
    :hook
    (after-init . doom-modeline-mode))
#+END_SRC

*** [[https://magit.vc/][=magit=]]

This package is an interface to =git= in Emacs.

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :bind (("C-x g" . magit-status))
    :config
    (setq git-commit-summary-max-length 50)
    (setq git-commit-fill-column 72)
    (setq magit-log-arguments (quote ("--graph"
                                      "--decorate"
                                      "--color")))
    (setq magit-commit-arguments (quote ("--gpg-sign=98723A2089026CD6")))
    (setq magit-repository-directories
          '(("~/projects" . 3)
            ("~/config-files" . 1)
            ("~/Dropbox/linguistics" . 1))))
#+END_SRC

*** [[https://github.com/bbatsov/projectile][=projectile=]]

#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :pin melpa-stable
    :bind (("C-c p" . projectile-command-map))
    :config
    (projectile-mode +1)
    (setq projectile-completion-system 'ivy)
    (setq projectile-project-search-path '("~/projects/")))

  (use-package counsel-projectile
    :ensure t
    :config
    (counsel-projectile-mode))
#+END_SRC

*** [[https://github.com/Alexander-Miller/treemacs][=treemacs=]]

#+BEGIN_SRC emacs-lisp
  (use-package treemacs
    :ensure t
    :defer t
    :bind
    (("M-0"       . treemacs-select-window)
     ("C-x t 1"   . treemacs-delete-other-windows)
     ("C-x t t"   . treemacs)
     ("C-x t B"   . treemacs-bookmark)
     ("C-x t C-t" . treemacs-find-file)
     ("C-x t M-t" . treemacs-find-tag)))

  (use-package treemacs-projectile
    :after treemacs projectile
    :ensure t)

  (use-package treemacs-icons-dired
    :after treemacs dired
    :ensure t
    :config (treemacs-icons-dired-mode))

  (use-package treemacs-magit
    :after treemacs magit
    :ensure t)
#+END_SRC

*** [[https://github.com/justbur/emacs-which-key][=which-key=]]

This package shows you possible keybinding continuations after a delay,
which is useful in case you forget keybindings.

#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :config
    (which-key-mode))
#+END_SRC

*** =ibuffer=

This sets up ~ibuffer~ as a replacement for ~list-buffers~. Buffers will
be sorted by major mode in the ibuffer window (though I prefer to have
things sorted by version control project; see =ibuffer-vc=
below). Moreover, setting ~ibuffer-expert~ to ~t~ will prevent prompting
for deletion of an unmodified buffer. This setup also prevents the
display of empty filter groups, and, finally, it displays file sizes in
a human readable format.

#+BEGIN_SRC emacs-lisp
  (use-package ibuffer
    :ensure t
    :bind (([remap list-buffers] . ibuffer))
    :config
    (setq ibuffer-default-sorting-mode 'major-mode)
    (setq ibuffer-expert t)
    (setq ibuffer-show-empty-filter-groups nil)
    (define-ibuffer-column size-h
      (:name "Size" :inline t)
      (cond
       ((> (buffer-size) 1000000) (format "%7.1fM" (/ (buffer-size) 1000000.0)))
       ((> (buffer-size) 100000) (format "%7.0fk" (/ (buffer-size) 1000.0)))
       ((> (buffer-size) 1000) (format "%7.1fk" (/ (buffer-size) 1000.0)))
       (t (format "%8d" (buffer-size)))))
    (setq ibuffer-formats
          '((mark modified read-only " "
                  (name 18 18 :left :elide)
                  " "
                  (size-h 9 -1 :right)
                  " "
                  (mode 16 16 :left :elide)
                  " "
                  filename-and-process))))

#+END_SRC

*** [[https://github.com/purcell/ibuffer-vc][=ibuffer-vc=]]

This extends =ibuffer= to allow the files to be grouped according to
their version control parent root.

#+BEGIN_SRC emacs-lisp
  (use-package ibuffer-vc
    :ensure t
    :config
    (add-hook 'ibuffer-hook
              (lambda ()
                (ibuffer-vc-set-filter-groups-by-vc-root)
                (unless (eq ibuffer-sorting-mode 'alphabetic)
                  (ibuffer-do-sort-by-alphabetic)))))

#+END_SRC

*** [[https://github.com/abo-abo/ace-window][=ace-window=]]

This sets up =ace-window= as a replacement for ~other-window~. I've also
set a larger font size for the ~aw-keys~ that get displayed in each
window. Finally, there is a bug in the MELPA Stable version of this
package at the time of updating this file (2018-08-03, version 0.9.0),
so I've pinned this package to MELPA for the time being, since the bug
does not exist in that version of this package.

#+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :ensure t
    :bind (([remap other-window] . ace-window))
    :config
    (custom-set-faces
     '(aw-leading-char-face
       ((t (:inherit ace-jump-face-foreground :height 3.0)))))
    :pin melpa)
#+END_SRC

*** [[https://github.com/abo-abo/swiper][=ivy=]]

This installs =ivy=, which is a completion framework that basically
replaces =ido=. Enabling =ivy-mode= sets up =ivy= completion for file
and buffer names.

Moreover, setting =ivy-use-virtual-buffers= to something that is non nil
will include virtual buffers in the completion list.

=ivy-count-format= specifies how the number of candidates and the
current candidate are displayed.

Setting =ivy-wrap= to true causes =C-n= and =C-p= to wrap
around when cycling through candidates.

Finally, I've bound =C-c C-r= to =ivy-resume=, which will resume the
last =ivy= completion session, which is useful if you accidentally close
it.

#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :ensure t
    :bind (("C-c C-r" . ivy-resume))
    :config
    (ivy-mode t)
    (setq ivy-use-virtual-buffers t)
    (setq ivy-count-format "(%d/%d) ")
    (setq ivy-wrap t))
#+END_SRC

*** [[https://github.com/abo-abo/swiper][=counsel=]]

This sets up =counsel=, which provides versions of many common Emacs
commands that use =ivy=. Enabling =counsel-mode= sets up the default
keybindings for all of the =counsel= replacement commands.

#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :ensure t
    :config
    (counsel-mode t))
#+END_SRC

*** [[https://github.com/abo-abo/swiper][=swiper=]]

This sets up =swiper=, which is an alternative to =isearch=.

#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :ensure t
    :bind (("C-s" . swiper)))
#+END_SRC

*** [[exec-path-from-shell][=exec-path-from-shell=]]

Get ~$MANPATH~, ~$PATH~, ~$GEM_HOME~, ~$GEM_PATH~, and exec-path from
the shell (but only in macOS).

#+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell
    :ensure t
    :if (memq window-system '(mac ns))
    :config
    (setq exec-path-from-shell-variables '("PATH" "MANPATH" "GEM_HOME" "GEM_PATH"))
    (exec-path-from-shell-initialize))
#+END_SRC

*** [[https://www.emacswiki.org/emacs/MultiTerm][=multi-term=]]

This installs the package =multi-term= for better management of shell
sessions inside of Emacs buffers.

#+BEGIN_SRC emacs-lisp
  (use-package multi-term
    :ensure t)
#+END_SRC

*** [[https://github.com/dieggsy/eterm-256color][=eterm-256color=]]

This installs the package =eterm-256color= for support of escaped color
sequences in shells run inside of Emacs buffers.

#+BEGIN_SRC emacs-lisp
  (use-package eterm-256color
    :ensure t
    :config
    (add-hook 'term-mode-hook #'eterm-256color-mode))
#+END_SRC

*** [[https://github.com/domtronn/all-the-icons.el][=all-the-icons=]]

This sets up the =all-the-icons= package, which can be used by the
=doom-themes= package to set up =treemacs=.

#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons
    :ensure t)
#+END_SRC

*** [[fci][=fill-column-indicator=]]

I use =Fill-Column-Indicator= to help wrap my writing and code at
appropriate points. I'd also like to enable the column rule by default
in ~markdown-mode~. I don't enable it by default for =org= because the
column rule causes problems for =org= commands like ~M-<RET>~
(~org-insert-heading~) when run in the context of a list item. I'm not
entirely sure what the problem is, but it causes the point to end up at
the end of the line, after the column rule.

#+BEGIN_SRC emacs-lisp
  (use-package fill-column-indicator
    :ensure t
    :config
    (setq-default fill-column 72)
    (add-hook 'markdown-mode-hook 'fci-mode))
#+END_SRC

*** [[markdown-mode][=markdown-mode=]]

I use =markdown-mode= for editing files that end in =.md=, =.mdown=, or
=.markdown=. Moreover, =gfm-mode= (another major mode provided by this
package) is used for editing files called =README.md= in particular,
which is generally the default name for a README file in a GitHub repo.

Setting the ~markdown-command~ to ~multimarkdown~ uses [[http://fletcherpenney.net/multimarkdown/][~multimarkdown~]]
to export the Markdown file to HTML, PDF, /etc./.

#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :ensure t
    :commands (markdown-mode gfm-mode)
    :mode (("README\\.md\\'" . gfm-mode)
           ("\\.md\\'" . markdown-mode)
           ("\\.mdown\\'" . markdown-mode)
           ("\\.markdown\\'" . markdown-mode))
    :init
    (setq markdown-command "multimarkdown"))
#+END_SRC

*** [[https://www.gnu.org/software/auctex/][=auctex=]]

This sets up AUCTeX for editing LaTeX documents. Note that the
distributed package is called AUCTeX, but the package that you actually
need to load is just called "tex". Thus, the loaded package is just
=tex=, but we can set AUCTeX as the ~:ensure~ value to make sure that it
is isntalled.

~TeX-auto-save~ automatically saves the file in the buffer, and then
~TeX-parse-self~ parsing the (saved) file so that the mode can provide
macro and compleition information, based on the packages you're using.

Setting ~TeX-master~ to ~nil~ will prompt for setting the master file,
which is the root file that will be used when compiling the document, if
you're using ~\include~ or ~\input~, for example.

The next two configuration options set up AUCTeX to use =pdf-tools=. See
[[https://emacs.stackexchange.com/a/19475/122][here]], [[https://emacs.stackexchange.com/a/21764/122][here]], and [[https://emacs.stackexchange.com/a/23853/122][here]] for more information (the second and third links
are about also setting ~TeX-view-program-list~, which I had to set in
addition to ~TeX-view-program-selection~ in order to get this to work);
moreover, see [[https://emacs.stackexchange.com/a/22591/122][here]] for installing =pdf-tools= on macOS.

Next, I set the label prefixes that should be used when inserting a
section with =C-c C-s=.

The next configuration bit sets up AUCTeX to also be able to use [[https://github.com/cereda/arara][arara]].

And, finally, setting ~TeX-fold-mode~ to non nil enables the ability to
fold stuff; moreover, setting it as part of the ~'TeX-mode-hook~ means
that it will be available in all AUCTeX modes, since this (along with
~text-mode-hook~) is run by each of the special AUCTeX mode hooks.

#+BEGIN_SRC emacs-lisp
  (use-package tex
    :ensure auctex
    :mode ("\\.tex\\'" . TeX-latex-mode)
    :config
    (setq TeX-auto-save t)
    (setq TeX-parse-self t)
    (setq-default TeX-master nil)
    (setq TeX-view-program-list '(("PDF Tools" TeX-pdf-tools-sync-view)))
    (setq TeX-view-program-selection '((output-pdf "PDF Tools")))
    (setq TeX-source-correlate-start-server t)
    (add-hook 'TeX-after-compilation-finished-functions
              #'TeX-revert-document-buffer)
    (setq LaTeX-section-label
          '(("part" . "part:")
            ("chapter" . "chap:")
            ("section" . "sec:")
            ("subsection" . "subsec:")
            "subsubsection" . "subsubsec:"))
    (add-to-list
     'TeX-command-list
     '("Arara"
       "arara %s"
       TeX-run-command
       nil                       ; ask for confirmation
       t                         ; active in all modes
       :help "Run Arara"))
    (add-to-list
     'TeX-command-list
     '("XeLaTeX"
       "xelatex --file-line-error %s"
       TeX-run-command
       nil
       t
       :help "Run XeLaTeX"))
    (add-to-list
      'TeX-command-list
      '("LuaLaTeX"
        "lualatex --file-line-error %s"
        TeX-run-command
        nil
        t
        :help "Run LuaLaTeX"))
    (add-hook 'TeX-mode-hook (lambda ()
                               (TeX-fold-mode 1))))
#+END_SRC

*** [[https://www.gnu.org/software/auctex/reftex.html][=reftex=]]

This sets up and installs RefTeX for use with AUCTeX.

#+BEGIN_SRC emacs-lisp
  (use-package reftex
    :after tex
    :config
    (setq reftex-plug-into-AUCTeX t)
    (add-hook 'TeX-mode-hook 'turn-on-reftex))
#+END_SRC

*** [[https://github.com/politza/pdf-tools/][=pdf-tools=]]

If on macOS, =epdfinfo= needs to be installed, which can be done with
~brew tap dunn/emacs && brew install pdf-tools~ (see [[https://emacs.stackexchange.com/a/22591/122][here]]).

This then sets up =pdf-tools= and also disables the display of line
numbers in buffers for PDFs.

#+BEGIN_SRC emacs-lisp
  (use-package pdf-tools
    :ensure t
    :config
    (pdf-tools-install)
    (setq pdf-info-epdfinfo-program "/usr/local/bin/epdfinfo")
    (add-hook 'pdf-view-mode-hook
              (lambda ()
                (display-line-numbers-mode -1))))
#+END_SRC

*** [[yasnippet][=YASnippet=]]

This sets up =yasnippet=. ~:demand t~ ensures it is loaded at startup,
and the ~after-save-hook~ reloads all snippets after saving a snippet
file.

#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :demand t
    :mode
    ("\\.yasnippet\\'" . snippet-mode)
    :init
    (progn
      (add-hook 'after-save-hook
                (lambda ()
                  (when (eql major-mode 'snippet-mode)
                    (yas-reload-all)))))
    :config
    (yas-global-mode t))

#+END_SRC

My snippets are stored in =~/.emacs.d/snippets=, which is one of the
default locations that is checked for snippets (see ~yas-snippet-dirs~).

* Preferences

Let's get rid of the error bell.

#+BEGIN_SRC emacs-lisp
  (setq ring-bell-function 'ignore)
#+END_SRC

Let's make the "yes or no" prompts shorter.

#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

Let's prevent Emacs from adding customized settings to =init.el=. The
following will cause the customized settings to be written to a
temporary file, effectively making the changes session local, and also
preventing Emacs from writing anything to =init.el=.

#+BEGIN_SRC emacs-lisp
  (setq custom-file (make-temp-file "emacs-custom"))
#+END_SRC

* Appearance

** Hide some default stuff

Don't display the splash screen.

#+BEGIN_SRC emacs-lisp
  (setq inhibit-splash-screen t)
#+END_SRC

Don't display the tool bar.

#+BEGIN_SRC emacs-lisp
  (tool-bar-mode 0)
#+END_SRC

Don't display the menu bar.

#+BEGIN_SRC emacs-lisp
  (menu-bar-mode 0)
#+END_SRC

Don't display the scroll bar

#+BEGIN_SRC emacs-lisp
  (scroll-bar-mode 0)
#+END_SRC

Don't have a message in the scratch buffer.

#+BEGIN_SRC emacs-lisp
  (setq initial-scratch-message nil)
#+END_SRC

Don't display fringes.

#+BEGIN_SRC emacs-lisp
  (set-fringe-mode '(0 . 0))
#+END_SRC

On a Mac (requires Emacs 26), make the titlebar transparent, set it to
dark mode, remove the icon and title of the file.

#+BEGIN_SRC emacs-lisp
  (when
      (and
         (>= emacs-major-version 26)
         (eq system-type 'darwin))
    (add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
    (add-to-list 'default-frame-alist '(ns-appearance . dark))
    (setq ns-use-proxy-icon nil)
    (setq frame-title-format nil))
#+END_SRC

** Buffers

For line numbers, use new line number support in Emacs 26 and newer;
otherwise, no longer display line numbers.

#+BEGIN_SRC emacs-lisp
  (when (>= emacs-major-version 26)
    (global-display-line-numbers-mode))
#+END_SRC

** Mode line

Display the line and column numbers in the mode line.

#+BEGIN_SRC emacs-lisp
  (setq column-number-mode t)
#+END_SRC

* Editing

Show matching parentheses.

#+BEGIN_SRC emacs-lisp
  (show-paren-mode 1)
#+END_SRC

Don't use tabs! (Note that ~setq-default~ only sets the value of
~indent-tabs-mode~ if it isn't already set by something else in a local
buffer. A more agressive stance against tabs would be
~(setq indent-tabs-mode nil)~, but there might be some cases where tabs
are actually wanted (e.g., makefiles), so I'd rather not do that.)

#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil)
#+END_SRC

* Exiting and saving

** Whitespace

Ensure that a file ends with a newline.

#+BEGIN_SRC emacs-lisp
  (setq require-final-newline t)
#+END_SRC


# Local Variables:
# mode: org
# coding: utf-8
# fill-column: 72
# indent-tabs-mode: nil
# End:
